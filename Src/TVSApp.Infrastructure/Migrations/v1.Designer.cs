// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TVS_App.Infrastructure.Data;

#nullable disable

namespace TVS_App.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20250517024232_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "customer");
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.ServiceOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Enterprise")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimateMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EstimateMessage");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PurchasePartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RepairDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RepairResult")
                        .HasColumnType("int");

                    b.Property<int>("RepairStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SecurityCode");

                    b.Property<int>("ServiceOrderStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ServiceOrders", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "serviceOrders");
                });

            modelBuilder.Entity("TVS_App.Infrastructure.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TVS_App.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TVS_App.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TVS_App.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TVS_App.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("TVS_App.Domain.ValueObjects.Customer.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CustomerPhone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Phone")
                                .HasAnnotation("Relational:JsonPropertyName", "customerPhone");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "phone");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.Customer.Phone", "Phone2", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CustomerPhone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Phone2")
                                .HasAnnotation("Relational:JsonPropertyName", "customerPhone");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "phone2");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.Customer.Address", "Address", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City")
                                .HasAnnotation("Relational:JsonPropertyName", "city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Neighborhood")
                                .HasAnnotation("Relational:JsonPropertyName", "neighborhood");

                            b1.Property<string>("Number")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Number")
                                .HasAnnotation("Relational:JsonPropertyName", "number");

                            b1.Property<string>("State")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("State")
                                .HasAnnotation("Relational:JsonPropertyName", "state");

                            b1.Property<string>("Street")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Street")
                                .HasAnnotation("Relational:JsonPropertyName", "street");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("ZipCode")
                                .HasAnnotation("Relational:JsonPropertyName", "zipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "address");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.Customer.Email", "Email", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CustomerEmail")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Email")
                                .HasAnnotation("Relational:JsonPropertyName", "customerEmail");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "email");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.Customer.Name", "Name", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CustomerName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Name")
                                .HasAnnotation("Relational:JsonPropertyName", "customerName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Phone2")
                        .IsRequired();
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.ServiceOrder", b =>
                {
                    b.HasOne("TVS_App.Domain.Entities.Customer", "Customer")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("TVS_App.Domain.ValueObjects.ServiceOrder.Guarantee", "Guarantee", b1 =>
                        {
                            b1.Property<long>("ServiceOrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ServiceOrderGuarantee")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Guarantee");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrders");

                            b1.HasAnnotation("Relational:JsonPropertyName", "guarantee");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.ServiceOrder.LaborCost", "LaborCost", b1 =>
                        {
                            b1.Property<long>("ServiceOrderId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("ServiceOrderLaborCost")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("LaborCost");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrders");

                            b1.HasAnnotation("Relational:JsonPropertyName", "laborCost");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.ServiceOrder.PartCost", "PartCost", b1 =>
                        {
                            b1.Property<long>("ServiceOrderId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("ServiceOrderPartCost")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PartCost");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrders");

                            b1.HasAnnotation("Relational:JsonPropertyName", "partCost");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.ServiceOrder.Product", "Product", b1 =>
                        {
                            b1.Property<long>("ServiceOrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Accessories")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Product_Accessories")
                                .HasAnnotation("Relational:JsonPropertyName", "accessories");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Product_Brand")
                                .HasAnnotation("Relational:JsonPropertyName", "brand");

                            b1.Property<string>("Defect")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Product_Defect")
                                .HasAnnotation("Relational:JsonPropertyName", "defect");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Product_Location")
                                .HasAnnotation("Relational:JsonPropertyName", "location");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Product_Model")
                                .HasAnnotation("Relational:JsonPropertyName", "model");

                            b1.Property<string>("SerialNumber")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Product_SerialNumber")
                                .HasAnnotation("Relational:JsonPropertyName", "serialNumber");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("Product_Type")
                                .HasAnnotation("Relational:JsonPropertyName", "type");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrders");

                            b1.HasAnnotation("Relational:JsonPropertyName", "product");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.OwnsOne("TVS_App.Domain.ValueObjects.ServiceOrder.Solution", "Solution", b1 =>
                        {
                            b1.Property<long>("ServiceOrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ServiceOrderSolution")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Solution")
                                .HasAnnotation("Relational:JsonPropertyName", "serviceOrderSolution");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrders");

                            b1.HasAnnotation("Relational:JsonPropertyName", "solution");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Guarantee");

                    b.Navigation("LaborCost")
                        .IsRequired();

                    b.Navigation("PartCost")
                        .IsRequired();

                    b.Navigation("Product")
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("TVS_App.Domain.Entities.Customer", b =>
                {
                    b.Navigation("ServiceOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
