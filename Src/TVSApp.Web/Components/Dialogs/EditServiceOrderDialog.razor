@using System.Globalization
@using System.Text
@using TVS_App.Application.Commands.CustomerCommands
@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Application.DTOs
@using TVS_App.Application.DTOs.ServiceOrder
@using TVS_App.Domain.Enums
@using TVSApp.Web.Extensions
@using TVSApp.Web.Handlers

<MudDialog MaxWidth="MaxWidth.False" FullWidth="true">

    <TitleContent>
        <div class="bg-red-700 p-3 rounded-t-lg">
            <h2 class="font-extrabold text-2xl text-[#BE0405]">
                EDITAR OS: @ServiceOrder.Id
            </h2>
        </div>
    </TitleContent>

    <DialogContent>
        <!-- EMPRESA -->
        <div class="pt-3 pb-2">
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">EMPRESA</MudText>
            <MudSelect T="EEnterprise"
                       Label="Empresa"
                       @bind-Value="_command.Enterprise"
                       Variant="Variant.Outlined"
                       Class="w-full mb-5">
                @foreach (var enterprise in Enum.GetValues(typeof(EEnterprise)).Cast<EEnterprise>())
                {
                    <MudSelectItem Value="@enterprise">@enterprise.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </div>

        <!-- CLIENTE -->
        <div class="py-3 bg-gray-50">
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">CLIENTE</MudText>
            <MudAutocomplete T="CustomerDto?"
                             Value="_selectedCustomer"
                             ValueChanged="OnCustomerSelected"
                             Variant="Variant.Outlined"
                             SearchFunc="SearchCustomers"
                             ToStringFunc="@(c => c?.Name ?? "")"
                             Class="w-full" />
        </div>

        <!-- PRODUTO -->
        <div class="py-3">
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">PRODUTO</MudText>
            <div class="flex flex-col gap-3">
                <MudSelect T="EProduct"
                           Label="Tipo"
                           @bind-Value="_command.Type"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var type in Enum.GetValues(typeof(EProduct)).Cast<EProduct>())
                    {
                        <MudSelectItem Value="@type">@type.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Variant="Variant.Outlined" Label="Marca" @bind-Value="_command.Brand" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Modelo" @bind-Value="_command.Model" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Série" @bind-Value="_command.SerialNumber" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Defeito" @bind-Value="_command.Defect" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Acessórios" @bind-Value="_command.Accessories" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Prateleira" @bind-Value="_command.Location" Class="w-full" />

                <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="UpdateLocation" />
            </div>
        </div>

        <!-- ORÇAMENTO -->
        <div class="py-3 bg-gray-50">
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">ORÇAMENTO</MudText>
            <div class="flex flex-col gap-3">
                <MudSelect T="EServiceOrderStatus"
                           Label="Status da OS"
                           @bind-Value="_command.ServiceOrderStatus"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var status in Enum.GetValues(typeof(EServiceOrderStatus)).Cast<EServiceOrderStatus>())
                    {
                        <MudSelectItem Value="@status">@status.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="ERepairStatus"
                           Label="Status do Reparo"
                           @bind-Value="_command.RepairStatus"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var status in Enum.GetValues(typeof(ERepairStatus)).Cast<ERepairStatus>())
                    {
                        <MudSelectItem Value="@status">@status.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Variant="Variant.Outlined" Label="Solução" @bind-Value="_command.Solution" Lines="3" Class="w-full" />
                <MudTextField Variant="Variant.Outlined" Label="Mensagem de orçamento" @bind-Value="_command.EstimateMessage" Class="w-full" />
                <div class="w-full">
                    <label class="block text-[#767676] font-medium">Valor da peça</label>
                    <input type="number" class="w-full text-lg border border-[#BDBDBD] rounded-md p-4 focus:outline-none focus:ring-1 focus:ring-[#BE0405] focus:border-[#BE0405] transition" @bind="_command.PartCost" placeholder="Valor da peça" />
                </div>
                <div class="w-full">
                    <label class="block text-[#767676] font-medium">Valor da mão de obra</label>
                    <input type="number" class="w-full text-lg border border-[#BDBDBD] rounded-md p-4 focus:outline-none focus:ring-1 focus:ring-[#BE0405] focus:border-[#BE0405] transition" @bind="_command.LaborCost" placeholder="Valor da mão de obra" />
                </div>
                <MudTextField Variant="Variant.Outlined" Label="Garantia" @bind-Value="_command.Guarantee" Class="w-full" />

                <MudSelect T="ERepairResult?"
                           Label="Resultado do Reparo"
                           @bind-Value="_command.RepairResult"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var result in Enum.GetValues(typeof(ERepairResult)).Cast<ERepairResult>())
                    {
                        <MudSelectItem Value="@(result as ERepairResult?)">@result.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudDatePicker Label="Data de Entrega" @bind-Date="_command.DeliveryDate" Class="w-full" />
            </div>
        </div>

        <div class="py-3 flex flex-col gap-2">
            @if (_isProcessing)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="w-full"
                           OnClick="EditServiceOrder">
                    Salvar Alterações
                </MudButton>

                <MudButton Variant="Variant.Text"
                           Color="Color.Default"
                           Class="w-full"
                           OnClick="() => MudDialog.Cancel()">
                    Cancelar
                </MudButton>
            }
        </div>
        
        <div class="px-6 bg-gray-50 py-4 border-b border-cinza">
            @if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Entered && ServiceOrder.RepairStatus == ERepairStatus.Entered)
            {
                <MudPaper Class="py-4 px-2" Elevation="0">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">
                        Adicionar Orçamento
                    </MudText>
                    <MudForm>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField
                                    Label="Solução"
                                    @bind-Value="_addEstimateCommand.Solution"
                                    For="@(() => _addEstimateCommand.Solution)"
                                    Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField
                                    Label="Mensagem de orçamento"
                                    Lines="1"
                                    @bind-Value="_addEstimateCommand.EstimateMessage"
                                    For="@(() => _addEstimateCommand.EstimateMessage)"
                                    Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField T="decimal"
                                              Label="Valor da peça"
                                              Bind-Value="@_addEstimateCommand.PartCost"
                                              Format="0.00"
                                              Culture="CultureInfo.InvariantCulture"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField T="decimal"
                                              Label="Valor da mão de obra"
                                              Bind-Value="@_addEstimateCommand.LaborCost"
                                              Format="0.00"
                                              Culture="CultureInfo.InvariantCulture"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField
                                    Label="Garantia"
                                    @bind-Value="_addEstimateCommand.Guarantee"
                                    For="@(() => _addEstimateCommand.Guarantee)"
                                    Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudSelect
                                    Variant="Variant.Outlined"
                                    T="ERepairResult"
                                    Label="Situação"
                                    @bind-Value="_addEstimateCommand.RepairResult"
                                    Color="Color.Primary">
                                    @foreach (var value in Enum.GetValues(typeof(ERepairResult)).Cast<ERepairResult>())
                                    {
                                        <MudSelectItem Value="@value">
                                            @GetPortugueseLabel(value)
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        </MudGrid>

                        <div class="flex justify-end">
                            @if (_isProcessing)
                            {
                                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                            }
                            else
                            {
                                <MudButton
                                    @onclick="AddEstimateAsync"
                                    Disabled="_isProcessing"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    Class="mt-3">
                                    Adicionar
                                </MudButton>
                            }
                        </div>
                    </MudForm>
                </MudPaper>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Evaluated && ServiceOrder.RepairStatus == ERepairStatus.Waiting)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">
                    Adicionar Resposta
                </MudText>
                <MudPaper Class="py-4 px-2 flex flex-row gap-5" Elevation="0">
                    @if (_isProcessing)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    }
                    else
                    {
                        <MudItem>
                            <MudButton
                                OnClick="AddApproveEstimateAsync"
                                Disabled="_isProcessing"
                                Variant="Variant.Filled"
                                Color="Color.Success">
                                Aprovado
                            </MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton
                                OnClick="AddReproveEstimateAsync"
                                Disabled="_isProcessing"
                                Variant="Variant.Filled"
                                Color="Color.Error">
                                Reprovado
                            </MudButton>
                        </MudItem>
                    }
                </MudPaper>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Evaluated &&
                     ServiceOrder.RepairStatus == ERepairStatus.Approved &&
                     ServiceOrder.RepairResult == ERepairResult.Repair)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">
                    Adicionar Compra de Peça
                </MudText>
                @if (_isProcessing)
                {
                    <MudItem>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    </MudItem>
                }
                else
                {
                    <MudItem>
                        <AddPurchasedPartButton ServiceOrder="ServiceOrder" DialogInstance="MudDialog" />
                    </MudItem>
                }
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.OrderPart &&
                     ServiceOrder.RepairStatus == ERepairStatus.Approved)
            {
                <div class="py-3 flex flex-col gap-2">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">
                        Marcar Como Consertado
                    </MudText>
                    @if (_isProcessing)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    }
                    else
                    {
                        <MudButton
                            @onclick="Repaired"
                            EndIcon="@Icons.Material.Filled.Done"
                            Variant="Variant.Filled"
                            Color="Color.Primary">
                            Consertado
                        </MudButton>
                    }
                </div>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Repaired ||
                     ServiceOrder.RepairStatus == ERepairStatus.Disapproved ||
                     ServiceOrder.RepairResult == ERepairResult.Unrepaired ||
                     ServiceOrder.RepairResult == ERepairResult.NoDefectFound)
            {
                <div class="py-3 flex flex-col gap-2">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">
                        Marcar Como Entregue
                    </MudText>
                    <DeliveryServiceOrderButton
                        OnDeliveryAdded="OnDeliveryAdded"
                        Command="_getServiceOrderByIdCommand" />
                </div>
            }
        </div>

    </DialogContent>
</MudDialog>




@code {
    private EditServiceOrderCommand _command = null!;
    private AddServiceOrderEstimateCommand _addEstimateCommand = new();
    private GetServiceOrderByIdCommand _getServiceOrderByIdCommand = new();
    [Parameter] public EventCallback OnRepairAdded { get; set; }
    private bool _isProcessing;
    
    [Parameter] public EventCallback OnDeliveryAdded { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrderDto ServiceOrder { get; set; } = null!;
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public CustomerHandler CustomerHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    protected override void OnInitialized()
    {
        try
        {
            _command = new EditServiceOrderCommand
            {
                Id = ServiceOrder.Id,
                CustomerId = ServiceOrder.CustomerId,
                Name = ServiceOrder.Name,
                Street = ServiceOrder.Street,
                Neighborhood = ServiceOrder.Neighborhood,
                City = ServiceOrder.City,
                Number = ServiceOrder.Number,
                ZipCode = ServiceOrder.ZipCode,
                State = ServiceOrder.State,
                Phone = ServiceOrder.Phone,
                Phone2 = ServiceOrder.Phone2,
                Email = ServiceOrder.Email,
                Cpf = ServiceOrder.Cpf,
                Brand = ServiceOrder.Brand,
                Model = ServiceOrder.Model,
                SerialNumber = ServiceOrder.SerialNumber,
                Defect = ServiceOrder.Defect ?? "",
                Accessories = ServiceOrder.Accessories ?? "",
                Type = ServiceOrder.Type,
                Location = ServiceOrder.Location,
                Enterprise = ServiceOrder.Enterprise,
                DeliveryDate = ServiceOrder.DeliveryDate,
                Solution = ServiceOrder.Solution,
                Guarantee = ServiceOrder.Guarantee,
                EstimateMessage = ServiceOrder.EstimateMessage,
                PartCost = ServiceOrder.PartCost,
                LaborCost = ServiceOrder.LaborCost,
                ServiceOrderStatus = ServiceOrder.ServiceOrderStatus,
                RepairStatus = ServiceOrder.RepairStatus,
                RepairResult = ServiceOrder.RepairResult
            };

            _addEstimateCommand.ServiceOrderId = ServiceOrder.Id;
            _getServiceOrderByIdCommand.Id = ServiceOrder.Id;

            _selectedCustomer = new CustomerDto
            {
                Id = ServiceOrder.CustomerId,
                Name = ServiceOrder.Name,
                Street = ServiceOrder.Street,
                Neighborhood = ServiceOrder.Neighborhood,
                City = ServiceOrder.City,
                Number = ServiceOrder.Number,
                ZipCode = ServiceOrder.ZipCode,
                State = ServiceOrder.State,
                Phone = ServiceOrder.Phone,
                Phone2 = ServiceOrder.Phone2,
                Email = ServiceOrder.Email,
                Cpf = ServiceOrder.Cpf
            };
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public async Task EditServiceOrder()
    {
        if (_selectedCustomer == null || _selectedCustomer.Id == 0)
        {
            Snackbar.Add("Selecione algum cliente", Severity.Error);
            return;
        }
        
        var customer = await CustomerHandler.
            GetCustomerByIdAsync(new GetCustomerByIdCommand { Id = _selectedCustomer.Id});

        if (!customer.IsSuccess || customer.Data == null)
        {
            Snackbar.Add(customer.Message ?? "Ocorreu um erro ao tentar obter o cliente", Severity.Error);
            return;
        }
        
        var result = await ServiceOrderHandler.EditServiceOrderAsync(_command);
        if (result.IsSuccess)
        {
            Snackbar.Add(result.Message ?? "Ordem de serviço alterada com sucesso!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar alterar a ordem de serviço");
        
    }

    private async Task AddEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderEstimate(_addEstimateCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Orçamento adicionado com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar o orçamento", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    private async Task AddApproveEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderApproveEstimate(_getServiceOrderByIdCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Resposta adicionada com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar a resposta", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    private async Task AddReproveEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderRejectEstimate(_getServiceOrderByIdCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Resposta adicionada com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar a resposta", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    public async Task Repaired()
    {
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderRepair(_getServiceOrderByIdCommand);

            if (result.IsSuccess)
            {
                Snackbar.Add("Conserto concluído com sucesso!", Severity.Success);
                await OnRepairAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao concluir o conserto!", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
    
    private async Task<IEnumerable<CustomerDto>> SearchCustomers(string? searchTerm, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return Enumerable.Empty<CustomerDto>();

        try
        {
            var result = await CustomerHandler.GetCustomerByNameAsync(searchTerm);

            if (!result.IsSuccess || result.Data == null)
            {
                Snackbar.Add(result.Message ?? "Erro ao buscar clientes", Severity.Error);
                return Enumerable.Empty<CustomerDto>();
            }

            var normalizedTerm = Normalize(searchTerm);
            
            var customers = result.Data;

            return customers
                .Where(c => Normalize(c.Name).Contains(normalizedTerm))
                .Take(20);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro: {e.Message}", Severity.Error);
            return Enumerable.Empty<CustomerDto>();
        }
    }
    
    private static string Normalize(string text)
    {
        return string.Concat(text.Normalize(NormalizationForm.FormD)
                .Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark))
            .ToLowerInvariant();
    }
    
    private async Task UpdateLocation()
    {
        var command = new GetServiceOrderByIdCommand { Id = ServiceOrder.Id };
        
        var result = await ServiceOrderHandler.GetServiceOrderById(command);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder = ServiceOrder with { Location = result.Data.Location };
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
    
    private string GetPortugueseLabel(ERepairResult value)
    {
        return value switch
        {
            ERepairResult.Repair => "Tem conserto",
            ERepairResult.Unrepaired => "Não tem conserto",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => value.ToString()
        };
    }
    
    private CustomerDto? _selectedCustomer;

    private void OnCustomerSelected(CustomerDto? customer)
    {
        _selectedCustomer = customer;

        if (customer != null)
        {
            _command.CustomerId = customer.Id;
            _command.Name = customer.Name;
            _command.Street = customer.Street;
            _command.Neighborhood = customer.Neighborhood;
            _command.City = customer.City;
            _command.Number = customer.Number;
            _command.ZipCode = customer.ZipCode;
            _command.State = customer.State;
            _command.Phone = customer.Phone;
            _command.Phone2 = customer.Phone2;
            _command.Email = customer.Email;
            _command.Cpf = customer.Cpf;
        }
    }

}