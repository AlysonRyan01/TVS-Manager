@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Application.DTOs.ServiceOrder
@using TVS_App.Domain.Enums
@using TVSApp.Web.Extensions
@using TVSApp.Web.Handlers

<MudDialog>
    <TitleContent>
        <h2 class="font-extrabold text-xl lg:text-3xl font-sans text-[#750303] md:text-center max-w-[300px] md:max-w-[100vw]">
            ADICIONAR CONSERTO - OS @ServiceOrder.Id
        </h2>
    </TitleContent>

    <DialogContent>
        <MudPaper Class="py-4 px-2" Elevation="0">

            <!-- EMPRESA -->
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">Empresa</MudText>
            <MudTextField Class="mb-7" Variant="Variant.Outlined" Label="Empresa" Value="@ServiceOrder.Enterprise.GetDisplayName()" ReadOnly="true"/>

            <!-- CLIENTE -->
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">Dados do Cliente</MudText>
            <MudGrid Class="mb-4">
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Nome" Value="@ServiceOrder.Name" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Telefone 1" Value="@ServiceOrder.Phone" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Telefone 2" Value="@ServiceOrder.Phone2" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Endereço" Value="@ServiceOrder.FormattedAddress" ReadOnly="true" />
                </MudItem>
            </MudGrid>

            <!-- PRODUTO -->
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="font-extrabold uppercase mb-2">Dados do Produto</MudText>
            <MudGrid Class="mb-4">
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Tipo" Value="@ServiceOrder.Type.GetDisplayName()" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Marca" Value="@ServiceOrder.Brand" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Modelo" Value="@ServiceOrder.Model" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Série" Value="@ServiceOrder.SerialNumber" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Text" Label="Defeito" Value="@ServiceOrder.Defect" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Data de Entrada" Value="@ServiceOrder.EntryDate.ToString("dd/MM/yyyy")" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Data da Compra" Value="@ServiceOrder.PurchasePartDate?.ToString("dd/MM/yyyy")" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Text" Label="Prateleira" Value="@ServiceOrder.Location" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="UpdateLocation" />
                </MudItem>
            </MudGrid>

            <!-- ORÇAMENTO -->
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="font-extrabold uppercase mb-2">Informações do Orçamento</MudText>
            <MudGrid Class="mb-4">
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Solução" Value="@ServiceOrder.Solution" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Valor" Value="@ServiceOrder.TotalAmount" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Data da Aprovação" Value="@ServiceOrder.ResponseDate?.ToString("dd/MM/yyyy")" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Situação" Value="@Situacao" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Tem Conserto" Value="@TemConserto" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Resposta do Cliente" Value="@Resposta" ReadOnly="true" />
                </MudItem>
            </MudGrid>

            <!-- BOTÃO -->
            <div class="flex justify-end mt-6">
                @if (_isBusy)
                {
                    <MudProgressLinear Indeterminate Color="Color.Primary" />
                }
                else
                {
                    <MudButton @onclick="Repaired"
                               EndIcon="@Icons.Material.Filled.Done"
                               Variant="Variant.Filled"
                               Size="Size.Large"
                               Color="Color.Primary"
                               Class="mt-3">
                        Consertado
                    </MudButton>
                }
            </div>
        </MudPaper>
    </DialogContent>
</MudDialog>




@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrderDto ServiceOrder { get; set; } = null!;
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;


    private bool _isBusy;
    public async Task Repaired()
    {
        _isBusy = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderRepair(new GetServiceOrderByIdCommand { Id = ServiceOrder.Id });

            if (result.IsSuccess)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add("Conserto concluído com sucesso!", Severity.Success);
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao concluir o conserto!", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
    }

    public string Situacao =>
        ServiceOrder.ServiceOrderStatus switch
        {
            EServiceOrderStatus.Entered => "Avaliação pendente",
            EServiceOrderStatus.Evaluated => "Avaliado",
            EServiceOrderStatus.OrderPart => "Aguardando peça",
            EServiceOrderStatus.Repaired => "Consertado",
            EServiceOrderStatus.Delivered => "Entregue",
            _ => "Desconhecido"
        };

    public string TemConserto =>
        ServiceOrder.RepairResult switch
        {
            ERepairResult.Repair => "Sim",
            ERepairResult.Unrepaired => "Não",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => "Desconhecido"
        };

    public string Resposta =>
        ServiceOrder.RepairStatus switch
        {
            ERepairStatus.Entered => "Sem orçamento ainda",
            ERepairStatus.Waiting => "Aguardando resposta",
            ERepairStatus.Approved => "Aprovado",
            ERepairStatus.Disapproved => "Não aprovou",
            _ => "Desconhecido"
        };

    private async Task UpdateLocation()
    {
        var command = new GetServiceOrderByIdCommand { Id = ServiceOrder.Id };
        
        var result = await ServiceOrderHandler.GetServiceOrderById(command);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder = ServiceOrder with { Location = result.Data.Location };
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
}