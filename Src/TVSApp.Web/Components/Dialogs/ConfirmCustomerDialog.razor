@using TVS_App.Application.Commands.CustomerCommands
@using TVS_App.Application.DTOs
@using TVS_App.Application.Exceptions
@using TVSApp.Web.Handlers
<MudDialog>
    <TitleContent>
        <h2 class="font-extrabold text-lg lg:text-2xl font-sans text-[#750303]">SELECIONAR CLIENTE</h2>
    </TitleContent>
    <DialogContent>
        <div class="flex flex-col w-full mb-10">
            <MudForm Class="mt-2">
                <p class="text-lg font-semibold mb-3 text-gray-600">Informações Básicas</p>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.Name"
                                  Label="Nome Completo"
                                  Variant="Variant.Text"
                                  Required="true"
                                  Class="flex-grow" />
                </div>
                
                <p class="text-lg font-semibold mb-3 mt-6 text-gray-600">Endereço</p>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.Street"
                                  Label="Rua"
                                  Variant="Variant.Text"
                                  Class="flex-grow" />

                    <MudTextField @bind-Value="EditableCustomerCommand.Number"
                                  Label="Número"
                                  Variant="Variant.Text"
                                  Class="w-32" />
                </div>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.Neighborhood"
                                  Label="Bairro"
                                  Variant="Variant.Text"
                                  Class="flex-grow" />
                </div>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.City"
                                  Label="Cidade"
                                  Variant="Variant.Text"
                                  Class="flex-grow" />

                    <MudTextField @bind-Value="EditableCustomerCommand.State"
                                  Label="Estado"
                                  Variant="Variant.Text"
                                  Class="w-24"
                                  MaxLength="2" />

                    <MudTextField @bind-Value="EditableCustomerCommand.ZipCode"
                                  Label="CEP"
                                  Variant="Variant.Text"
                                  Class="w-48"
                                  Mask="@(new PatternMask("00000-000"))" />
                </div>

                <p class="text-lg font-semibold mb-3 mt-6 text-gray-600">Documento</p>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.Cpf"
                                  Label="CPF"
                                  Variant="Variant.Text"
                                  Required="true"
                                  Mask="@(new PatternMask("000.000.000-00"))"
                                  Class="flex-grow" />
                </div>
                
                <p class="text-lg font-semibold mb-3 mt-6 text-gray-600">Contato</p>

                <div class="flex gap-4 mb-4">
                    <MudTextField @bind-Value="EditableCustomerCommand.Phone"
                                  Label="Telefone Principal"
                                  Variant="Variant.Text"
                                  Required="true"
                                  Class="flex-grow"
                                  Mask="@(new PatternMask("(00) 00000-0000"))" />

                    <MudTextField @bind-Value="EditableCustomerCommand.Phone2"
                                  Label="Telefone Secundário"
                                  Variant="Variant.Text"
                                  Class="flex-grow"
                                  Mask="@(new PatternMask("(00) 00000-0000"))" />
                </div>
            </MudForm>

            <div class="flex gap-4 mt-6">

                @if (_isBusy)
                {
                    <MudProgressLinear Indeterminate Color="Color.Primary" />
                }
                else
                {
                    <MudButton Variant="Variant.Filled"
                               OnClick="UpdateAndConfirmCustomer"
                               Color="Color.Primary"
                               Size="Size.Large">
                        Salvar
                    </MudButton>

                    <MudButton Variant="Variant.Text"
                               OnClick="() => MudDialog.Cancel()"
                               Color="Color.Default"
                               Size="Size.Large">Cancelar</MudButton>
                }
            </div>
        </div>
    </DialogContent>
</MudDialog>


@code 
{
    [Parameter] public long CustomerId { get; set; }
    public CustomerDto Customer { get; set; } = null!;
    public UpdateCustomerCommand EditableCustomerCommand { get; set; } = new();
    public GetCustomerByIdCommand Command => new GetCustomerByIdCommand { Id = CustomerId };

    [Inject] public CustomerHandler CustomerHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Command.Validate();
            var customerResult = await CustomerHandler.GetCustomerByIdAsync(Command);
            if (customerResult.IsSuccess && customerResult.Data != null)
            {
                Customer = customerResult.Data;
                
                EditableCustomerCommand = new UpdateCustomerCommand
                {
                    Id = Customer.Id,
                    Name = Customer.Name,
                    Street = Customer.Street,
                    Neighborhood = Customer.Neighborhood,
                    City = Customer.City,
                    Number = Customer.Number,
                    ZipCode = Customer.ZipCode,
                    State = Customer.State,
                    Phone = Customer.Phone,
                    Phone2 = Customer.Phone2,
                    Email = Customer.Email ?? "",
                    Cpf = Customer.Cpf
                };
            }
            else
            {
                Snackbar.Add(customerResult.Message ?? "Ocorreu um erro ao buscar o cliente", Severity.Error);
            }
        }
        catch (CommandException<GetCustomerByIdCommand> ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private bool _isBusy;
    
    private async Task UpdateAndConfirmCustomer()
    {
        _isBusy = true;
        try
        {
            EditableCustomerCommand.Normalize();
            EditableCustomerCommand.Validate();

            var updateResult = await CustomerHandler.UpdateCustomerAsync(EditableCustomerCommand);
            if (updateResult.IsSuccess && updateResult.Data != null)
            {
                MudDialog.Close(DialogResult.Ok(updateResult.Data));
                Snackbar.Add("Cliente atualizado com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add(updateResult.Message ?? "Erro ao atualizar o cliente", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
    }
}